// ##### --------------------------------------------------- #####
// ##### Workplace Support App (WSA) - Google Apps Script Backend #####
// ##### --------------------------------------------------- #####

// --- CONFIGURATION ---
var SECRET_KEY = "YOUR_SECRET_KEY_HERE"; // For Monitor App
var SPREADSHEET_ID = SpreadsheetApp.getActiveSpreadsheet().getId();
var VISITS_SHEET_NAME = "Visits";
var CHECKLISTS_SHEET_NAME = "Checklists";

// --- WEB APP ENDPOINTS ---

/**
 * Handles GET requests.
 * 1. Monitor App (JSONP): If 'callback' param exists, validates 'token' and returns all data from [VISITS_SHEET_NAME].
 * 2. Worker App (JSON): If 'action=getForms' param exists, returns custom checklist from [CHECKLISTS_SHEET_NAME] (no key needed).
 */
function doGet(e) {
  // 1. Monitor App Request (JSONP)
  if (e.parameter.callback) {
    var token = e.parameter.token;
    if (token !== SECRET_KEY) {
      return ContentService
        .createTextOutput(JSON.stringify({ status: "error", message: "Access Denied" }))
        .setMimeType(ContentService.MimeType.JAVASCRIPT);
    }
    
    var sheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(VISITS_SHEET_NAME);
    var data = sheet.getDataRange().getValues();
    var headers = data.shift();
    var json = data.map(function(row) {
      var obj = {};
      headers.forEach(function(header, i) {
        if (row[i] instanceof Date) {
          obj[header] = row[i].toISOString(); 
        } else {
          obj[header] = row[i];
        }
      });
      return obj;
    });

    var callback = e.parameter.callback;
    var jsonpResponse = callback + '(' + JSON.stringify(json) + ')';
    return ContentService
      .createTextOutput(jsonpResponse)
      .setMimeType(ContentService.MimeType.JAVASCRIPT);
  }

  // 2. Worker App Request (JSON)
  if (e.parameter.action === 'getForms' && e.parameter.companyName) {
    var companyName = e.parameter.companyName;
    var questions = [];
    try {
      var checklistSheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(CHECKLISTS_SHEET_NAME);
      var data = checklistSheet.getDataRange().getValues();
      var headers = data.shift(); // Get headers (Company Name, Question 1, ...)
      
      for (var i = 0; i < data.length; i++) {
        if (data[i][0] === companyName) { // Find matching company in Col A
          // Loop through question columns (from Col B onwards)
          for (var j = 1; j < headers.length; j++) {
            if (data[i][j]) { // If question cell is not empty
              questions.push(data[i][j]);
            } else {
              break; // Stop if we hit an empty question column
            }
          }
          break; // Found company, stop searching
        }
      }
      Logger.log("Found " + questions.length + " questions for " + companyName);
    } catch (err) {
      Logger.log("Error in getForms: " + err.toString());
      // Return empty array on error
    }
    
    return ContentService
      .createTextOutput(JSON.stringify(questions))
      .setMimeType(ContentService.MimeType.JSON);
  }

  // Default invalid request
  return ContentService
    .createTextOutput(JSON.stringify({ status: "error", message: "Invalid request" }))
    .setMimeType(ContentService.MimeType.JSON);
}


/**
 * Handles POST requests. Used by the Worker App AND Monitor App to submit data.
 */
function doPost(e) {
  var lock = LockService.getScriptLock();
  lock.waitLock(30000); 

  try {
    var sheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(VISITS_SHEET_NAME);
    var data = e.parameter;
    var headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    var arrivalTime = data["Arrival Time"];
    var workerName = data["Worker Name"];
    
    var batteryLevelColIdx = headers.indexOf("Battery Level") + 1; 
    var phoneHeaders = ["Worker Phone Number", "Emergency Contact Number", "Escalation Contact Number"];

    // Force phone numbers to text by prepending a single quote
    for (var key in data) {
      if (phoneHeaders.indexOf(key) > -1 && data[key]) {
        if (data[key].charAt(0) !== "'" && data[key].charAt(0) !== "+") {
          data[key] = "'" + data[key];
        }
      }
    }

    // Find existing row or create a new one
    var dataRange = sheet.getDataRange().getValues();
    var rowIndex = -1;
    for (var i = 1; i < dataRange.length; i++) {
      var rowArrivalTimeISO = "";
      try {
          if (dataRange[i][headers.indexOf("Arrival Time")] instanceof Date) {
               rowArrivalTimeISO = dataRange[i][headers.indexOf("Arrival Time")].toISOString();
          } else if (dataRange[i][headers.indexOf("Arrival Time")]) {
               rowArrivalTimeISO = new Date(dataRange[i][headers.indexOf("Arrival Time")]).toISOString();
          }
      } catch (dateErr) {
           Logger.log("Error parsing date in row " + (i+1) + ": " + dataRange[i][headers.indexOf("Arrival Time")]);
      }

      if (dataRange[i][headers.indexOf("Worker Name")] === workerName && rowArrivalTimeISO === arrivalTime) {
        rowIndex = i + 1;
        break;
      }
    }

    if (rowIndex !== -1) {
      // Update existing row
      headers.forEach(function(header) {
        if (data[header] !== undefined) {
          var colIndex = headers.indexOf(header) + 1;
          if (colIndex > 0) {
            sheet.getRange(rowIndex, colIndex).setValue(data[header]);

             // Parse and save numeric battery level
             if (header === "Notes" && data[header] && batteryLevelColIdx > 0) {
                var batteryMatch = data[header].match(/Battery: (\d+)%/);
                if (batteryMatch && batteryMatch[1]) {
                     var level = parseInt(batteryMatch[1], 10);
                     if (!isNaN(level)) {
                          sheet.getRange(rowIndex, batteryLevelColIdx).setValue(level);
                     }
                }
             }
          }
        }
      });
    } else {
      // Append new row
      var newRow = headers.map(function(header) {
        return data[header] || "";
      });
      // Parse and set initial battery level for new row
      if (data["Notes"] && batteryLevelColIdx > 0) {
           var batteryMatch = data["Notes"].match(/Battery: (\d+)%/);
           if (batteryMatch && batteryMatch[1]) {
                var level = parseInt(batteryMatch[1], 10);
                if (!isNaN(level)) {
                     newRow[batteryLevelColIdx - 1] = level; 
                }
           }
      }
      sheet.appendRow(newRow);
    }

    // Immediate alert triggers
    if (['EMERGENCY - PANIC BUTTON', 'DURESS_CODE_ACTIVATED', 'MISSED_CHECKIN'].indexOf(data['Alarm Status']) > -1) {
      var workerDataForEmail = {};
       if (rowIndex !== -1) {
           var updatedRowValues = sheet.getRange(rowIndex, 1, 1, headers.length).getValues()[0];
            headers.forEach(function(header, j) { 
                 if (phoneHeaders.indexOf(header) > -1 && typeof updatedRowValues[j] === 'string' && updatedRowValues[j].charAt(0) === "'") {
                     workerDataForEmail[header] = updatedRowValues[j].substring(1);
                 } else {
                     workerDataForEmail[header] = updatedRowValues[j];
                 }
            });
       } else {
           workerDataForEmail = { ...data }; // Clone data
            phoneHeaders.forEach(function(header) {
                 if (workerDataForEmail[header] && typeof workerDataForEmail[header] === 'string' && workerDataForEmail[header].charAt(0) === "'") {
                      workerDataForEmail[header] = workerDataForEmail[header].substring(1);
                 }
            });
       }
      sendAlertEmail(workerDataForEmail, data['Alarm Status']);
    }

  } catch (err) {
    Logger.log('Error in doPost: ' + err.toString() + ' | Data: ' + JSON.stringify(e.parameter));
  } finally {
    lock.releaseLock();
  }

  return ContentService.createTextOutput("Success");
}

// --- AUTOMATED TRIGGER FUNCTION ---
/**
 * This function should be run on a time-based trigger (e.g., every 5 minutes).
 * It checks for overdue workers and sends escalating email alerts.
 */
function checkOverdueWorkers() {
  var lock = LockService.getScriptLock();
  lock.waitLock(30000);

  try {
    var sheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(VISITS_SHEET_NAME);
    var dataRange = sheet.getDataRange();
    var data = dataRange.getValues();
    var headers = data[0];
    var now = new Date();
    var phoneHeaders = ["Worker Phone Number", "Emergency Contact Number", "Escalation Contact Number"]; 

    // Define all "resolved" statuses
    var resolvedStatuses = ['DEPARTED', 'SAFE - MANUALLY CLEARED', 'MONITOR_CLEARED_ALERT'];

    for (var i = 1; i < data.length; i++) {
      var row = data[i];
      var worker = {};
      headers.forEach(function(header, j) {
        // Remove leading quote from phone numbers for email function
        if (phoneHeaders.indexOf(header) > -1 && typeof row[j] === 'string' && row[j].charAt(0) === "'") {
            worker[header] = row[j].substring(1);
        } else {
            worker[header] = row[j];
        }
      });

      var status = worker['Alarm Status'];
      
      if (resolvedStatuses.indexOf(status) !== -1 || !worker['Anticipated Departure Time']) continue; 

      var anticipatedDeparture = null;
      try {
            anticipatedDeparture = new Date(worker['Anticipated Departure Time']);
            if (isNaN(anticipatedDeparture.getTime())) {
                 Logger.log("Skipping row " + (i+1) + ": Invalid Anticipated Departure Time format - " + worker['Anticipated Departure Time']);
                 continue; 
            }
      } catch (dateErr) {
            Logger.log("Skipping row " + (i+1) + ": Error parsing Anticipated Departure Time - " + worker['Anticipated Departure Time']);
            continue; 
      }


      if (now > anticipatedDeparture) {
        var overdueMinutes = (now.getTime() - anticipatedDeparture.getTime()) / 60000;
        var alertToSend = null;

        if (overdueMinutes >= 60 && status !== 'ESCALATION_SENT') {
          alertToSend = 'ESCALATION_SENT';
        } else if (overdueMinutes >= 45 && status !== 'EMAIL_3_SENT' && status !== 'ESCALATION_SENT') {
          alertToSend = 'EMAIL_3_SENT';
        } else if (overdueMinutes >= 30 && status !== 'EMAIL_2_SENT' && status !== 'EMAIL_3_SENT' && status !== 'ESCALATION_SENT') {
          alertToSend = 'EMAIL_2_SENT';
        } else if (overdueMinutes >= 15 && ['ON SITE', 'ALERT SENT'].includes(status) ) { 
          alertToSend = 'EMAIL_1_SENT';
        }

        if (alertToSend) {
          sheet.getRange(i + 1, headers.indexOf('Alarm Status') + 1).setValue(alertToSend);
          worker['Alarm Status'] = alertToSend; 
          sendAlertEmail(worker, alertToSend);
        }
      }
    }
  } catch (err) {
    Logger.log('Error in checkOverdueWorkers: ' + err.toString());
  } finally {
    lock.releaseLock();
  }
}

// --- EMAIL HELPER FUNCTION ---
/**
 * Sends a formatted alert email.
 */
function sendAlertEmail(workerData, alertType) {
  var recipient = alertType === 'ESCALATION_SENT' ? workerData['Escalation Contact Email'] : workerData['Emergency Contact Email'];
  var subject = '';
  var body = '';

  var locationName = workerData['Location Name'] || 'Not specified';
  var locationAddress = workerData['Location Address'] || 'Not specified';
  var workerName = workerData['Worker Name'] || 'Unknown Worker';
  var workerPhone = workerData['Worker Phone Number'] || 'Not specified';
  var anticipatedDepartureStr = 'Not specified';
   try {
       if (workerData['Anticipated Departure Time']) {
           anticipatedDepartureStr = new Date(workerData['Anticipated Departure Time']).toLocaleString();
       }
   } catch(e){ Logger.log("Could not format Anticipated Departure Time for email: " + workerData['Anticipated Departure Time']); }

  var locationLink = 'http://maps.google.com/?q=' + encodeURIComponent(locationAddress);
  if (workerData['Last Known GPS']) {
    locationLink = 'http://maps.google.com/?q=' + workerData['Last Known GPS'];
  }

  switch(alertType) {
    case 'EMERGENCY - PANIC BUTTON':
      subject = 'URGENT PANIC ALERT for ' + workerName;
      body = '<p><strong>A PANIC ALERT has been triggered by ' + workerName + '.</strong></p> <p>This is a high-priority alert indicating an emergency situation.</p>';
      break;
    case 'DURESS_CODE_ACTIVATED':
      subject = 'URGENT DURESS ALERT for ' + workerName;
      body = '<p><strong>A SILENT DURESS ALARM has been triggered by ' + workerName + '.</strong></p> <p>The worker has entered their Duress PIN, suggesting they may be under threat and unable to call for help directly.</p>';
      break;
    case 'MISSED_CHECKIN':
      subject = 'MISSED CHECK-IN ALERT for ' + workerName;
      body = '<p><strong>' + workerName + ' has missed a scheduled "Are you OK?" check-in.</strong></p>';
      break;
    case 'ESCALATION_SENT':
      subject = 'ESCALATION ALERT: ' + workerName + ' is 60+ mins Overdue';
      body = '<p>This is an escalation alert. ' + workerName + ' is now more than 60 minutes overdue and has not responded to previous alerts.</p>';
      break;
    case 'EMAIL_1_SENT':
    case 'EMAIL_2_SENT':
    case 'EMAIL_3_SENT':
      var minutesOverdue = 15;
      if (alertType === 'EMAIL_2_SENT') minutesOverdue = 30;
      if (alertType === 'EMAIL_3_SENT') minutesOverdue = 45;
      subject = 'Overdue Alert: ' + workerName + ' is ' + minutesOverdue + '+ mins Overdue';
      body = '<p>' + workerName + ' is now more than ' + minutesOverdue + ' minutes overdue.</p>';
      break;
    case 'ALERT SENT': 
         subject = 'Overdue Alert: ' + workerName + ' is overdue';
         body = '<p>' + workerName + ' became overdue and triggered an initial alert state.</p>';
         break;
    default: 
      subject = 'LWS Alert (' + alertType + ') for ' + workerName;
      body = '<p>An automated alert (' + alertType.replace(/_/g,' ') + ') has been triggered for ' + workerName + '.</p>';
      break;
  }

  var fullBody = '<html><body style="font-family: sans-serif; line-height: 1.6;">' + body + 
                   '<hr style="margin: 20px 0;"><h3>Visit Details:</h3><ul>' + 
                   '<li><strong>Worker:</strong> ' + workerName + '</li>' + 
                   '<li><strong>Phone:</strong> ' + workerPhone + '</li>' +
                   '<li><strong>Location:</strong> ' + locationName + '</li>' +
                   '<li><strong>Address:</strong> ' + locationAddress + '</li>' +
                   '<li><strong>Anticipated Departure:</strong> ' + anticipatedDepartureStr + '</li>' +
                   '</ul><p style="font-size: 1.2em; font-weight: bold;"><a href="' + locationLink + '">View Location on Map</a></p>' +
                   '<p style="font-size: 0.8em; color: #888;">This is an automated message from the Workplace Support App System.</p></body></html>';

  if (recipient) {
    try {
      MailApp.sendEmail({
        to: recipient,
        subject: subject,
        htmlBody: fullBody,
        name: "WSA System Alert"
      });
      Logger.log('Email sent to ' + recipient + ' for alert type ' + alertType + ' for worker ' + workerName);
    } catch (e) {
      Logger.log('Failed to send email to ' + recipient + ' for worker ' + workerName + ': ' + e.toString());
    }
  } else {
    Logger.log('Cannot send email: No recipient found for alert type ' + alertType + ' for worker ' + workerName);
  }
}

